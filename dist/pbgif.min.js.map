{"version":3,"sources":["node_modules/js-binary-schema-parser/lib/index.js","node_modules/js-binary-schema-parser/lib/parsers/uint8.js","node_modules/js-binary-schema-parser/lib/schemas/gif.js","node_modules/gifuct-js/lib/deinterlace.js","node_modules/gifuct-js/lib/lzw.js","node_modules/gifuct-js/lib/index.js","build.js"],"names":["window","parseGIF","decompressFrames","fetchGif","url","fetch","then","resp","arrayBuffer","buff","gif"],"mappings":"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","file":"pbgif.min.js","sourceRoot":"..","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loop = exports.conditional = exports.parse = void 0;\n\nvar parse = function parse(stream, schema) {\n  var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : result;\n\n  if (Array.isArray(schema)) {\n    schema.forEach(function (partSchema) {\n      return parse(stream, partSchema, result, parent);\n    });\n  } else if (typeof schema === 'function') {\n    schema(stream, result, parent, parse);\n  } else {\n    var key = Object.keys(schema)[0];\n\n    if (Array.isArray(schema[key])) {\n      parent[key] = {};\n      parse(stream, schema[key], result, parent[key]);\n    } else {\n      parent[key] = schema[key](stream, result, parent, parse);\n    }\n  }\n\n  return result;\n};\n\nexports.parse = parse;\n\nvar conditional = function conditional(schema, conditionFunc) {\n  return function (stream, result, parent, parse) {\n    if (conditionFunc(stream, result, parent)) {\n      parse(stream, schema, result, parent);\n    }\n  };\n};\n\nexports.conditional = conditional;\n\nvar loop = function loop(schema, continueFunc) {\n  return function (stream, result, parent, parse) {\n    var arr = [];\n\n    while (continueFunc(stream, result, parent)) {\n      var newParent = {};\n      parse(stream, schema, result, newParent);\n      arr.push(newParent);\n    }\n\n    return arr;\n  };\n};\n\nexports.loop = loop;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readBits = exports.readArray = exports.readUnsigned = exports.readString = exports.peekBytes = exports.readBytes = exports.peekByte = exports.readByte = exports.buildStream = void 0;\n\n// Default stream and parsers for Uint8TypedArray data type\nvar buildStream = function buildStream(uint8Data) {\n  return {\n    data: uint8Data,\n    pos: 0\n  };\n};\n\nexports.buildStream = buildStream;\n\nvar readByte = function readByte() {\n  return function (stream) {\n    return stream.data[stream.pos++];\n  };\n};\n\nexports.readByte = readByte;\n\nvar peekByte = function peekByte() {\n  var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return function (stream) {\n    return stream.data[stream.pos + offset];\n  };\n};\n\nexports.peekByte = peekByte;\n\nvar readBytes = function readBytes(length) {\n  return function (stream) {\n    return stream.data.subarray(stream.pos, stream.pos += length);\n  };\n};\n\nexports.readBytes = readBytes;\n\nvar peekBytes = function peekBytes(length) {\n  return function (stream) {\n    return stream.data.subarray(stream.pos, stream.pos + length);\n  };\n};\n\nexports.peekBytes = peekBytes;\n\nvar readString = function readString(length) {\n  return function (stream) {\n    return Array.from(readBytes(length)(stream)).map(function (value) {\n      return String.fromCharCode(value);\n    }).join('');\n  };\n};\n\nexports.readString = readString;\n\nvar readUnsigned = function readUnsigned(littleEndian) {\n  return function (stream) {\n    var bytes = readBytes(2)(stream);\n    return littleEndian ? (bytes[1] << 8) + bytes[0] : (bytes[0] << 8) + bytes[1];\n  };\n};\n\nexports.readUnsigned = readUnsigned;\n\nvar readArray = function readArray(byteSize, totalOrFunc) {\n  return function (stream, result, parent) {\n    var total = typeof totalOrFunc === 'function' ? totalOrFunc(stream, result, parent) : totalOrFunc;\n    var parser = readBytes(byteSize);\n    var arr = new Array(total);\n\n    for (var i = 0; i < total; i++) {\n      arr[i] = parser(stream);\n    }\n\n    return arr;\n  };\n};\n\nexports.readArray = readArray;\n\nvar subBitsTotal = function subBitsTotal(bits, startIndex, length) {\n  var result = 0;\n\n  for (var i = 0; i < length; i++) {\n    result += bits[startIndex + i] && Math.pow(2, length - i - 1);\n  }\n\n  return result;\n};\n\nvar readBits = function readBits(schema) {\n  return function (stream) {\n    var _byte = readByte()(stream); // convert the byte to bit array\n\n\n    var bits = new Array(8);\n\n    for (var i = 0; i < 8; i++) {\n      bits[7 - i] = !!(_byte & 1 << i);\n    } // convert the bit array to values based on the schema\n\n\n    return Object.keys(schema).reduce(function (res, key) {\n      var def = schema[key];\n\n      if (def.length) {\n        res[key] = subBitsTotal(bits, def.index, def.length);\n      } else {\n        res[key] = bits[def.index];\n      }\n\n      return res;\n    }, {});\n  };\n};\n\nexports.readBits = readBits;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ = require(\"../\");\n\nvar _uint = require(\"../parsers/uint8\");\n\n// a set of 0x00 terminated subblocks\nvar subBlocksSchema = {\n  blocks: function blocks(stream) {\n    var terminator = 0x00;\n    var chunks = [];\n    var streamSize = stream.data.length;\n    var total = 0;\n\n    for (var size = (0, _uint.readByte)()(stream); size !== terminator; size = (0, _uint.readByte)()(stream)) {\n      // catch corrupted files with no terminator\n      if (stream.pos + size >= streamSize) {\n        var availableSize = streamSize - stream.pos;\n        chunks.push((0, _uint.readBytes)(availableSize)(stream));\n        total += availableSize;\n        break;\n      }\n\n      chunks.push((0, _uint.readBytes)(size)(stream));\n      total += size;\n    }\n\n    var result = new Uint8Array(total);\n    var offset = 0;\n\n    for (var i = 0; i < chunks.length; i++) {\n      result.set(chunks[i], offset);\n      offset += chunks[i].length;\n    }\n\n    return result;\n  }\n}; // global control extension\n\nvar gceSchema = (0, _.conditional)({\n  gce: [{\n    codes: (0, _uint.readBytes)(2)\n  }, {\n    byteSize: (0, _uint.readByte)()\n  }, {\n    extras: (0, _uint.readBits)({\n      future: {\n        index: 0,\n        length: 3\n      },\n      disposal: {\n        index: 3,\n        length: 3\n      },\n      userInput: {\n        index: 6\n      },\n      transparentColorGiven: {\n        index: 7\n      }\n    })\n  }, {\n    delay: (0, _uint.readUnsigned)(true)\n  }, {\n    transparentColorIndex: (0, _uint.readByte)()\n  }, {\n    terminator: (0, _uint.readByte)()\n  }]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0xf9;\n}); // image pipeline block\n\nvar imageSchema = (0, _.conditional)({\n  image: [{\n    code: (0, _uint.readByte)()\n  }, {\n    descriptor: [{\n      left: (0, _uint.readUnsigned)(true)\n    }, {\n      top: (0, _uint.readUnsigned)(true)\n    }, {\n      width: (0, _uint.readUnsigned)(true)\n    }, {\n      height: (0, _uint.readUnsigned)(true)\n    }, {\n      lct: (0, _uint.readBits)({\n        exists: {\n          index: 0\n        },\n        interlaced: {\n          index: 1\n        },\n        sort: {\n          index: 2\n        },\n        future: {\n          index: 3,\n          length: 2\n        },\n        size: {\n          index: 5,\n          length: 3\n        }\n      })\n    }]\n  }, (0, _.conditional)({\n    lct: (0, _uint.readArray)(3, function (stream, result, parent) {\n      return Math.pow(2, parent.descriptor.lct.size + 1);\n    })\n  }, function (stream, result, parent) {\n    return parent.descriptor.lct.exists;\n  }), {\n    data: [{\n      minCodeSize: (0, _uint.readByte)()\n    }, subBlocksSchema]\n  }]\n}, function (stream) {\n  return (0, _uint.peekByte)()(stream) === 0x2c;\n}); // plain text block\n\nvar textSchema = (0, _.conditional)({\n  text: [{\n    codes: (0, _uint.readBytes)(2)\n  }, {\n    blockSize: (0, _uint.readByte)()\n  }, {\n    preData: function preData(stream, result, parent) {\n      return (0, _uint.readBytes)(parent.text.blockSize)(stream);\n    }\n  }, subBlocksSchema]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0x01;\n}); // application block\n\nvar applicationSchema = (0, _.conditional)({\n  application: [{\n    codes: (0, _uint.readBytes)(2)\n  }, {\n    blockSize: (0, _uint.readByte)()\n  }, {\n    id: function id(stream, result, parent) {\n      return (0, _uint.readString)(parent.blockSize)(stream);\n    }\n  }, subBlocksSchema]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0xff;\n}); // comment block\n\nvar commentSchema = (0, _.conditional)({\n  comment: [{\n    codes: (0, _uint.readBytes)(2)\n  }, subBlocksSchema]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0xfe;\n});\nvar schema = [{\n  header: [{\n    signature: (0, _uint.readString)(3)\n  }, {\n    version: (0, _uint.readString)(3)\n  }]\n}, {\n  lsd: [{\n    width: (0, _uint.readUnsigned)(true)\n  }, {\n    height: (0, _uint.readUnsigned)(true)\n  }, {\n    gct: (0, _uint.readBits)({\n      exists: {\n        index: 0\n      },\n      resolution: {\n        index: 1,\n        length: 3\n      },\n      sort: {\n        index: 4\n      },\n      size: {\n        index: 5,\n        length: 3\n      }\n    })\n  }, {\n    backgroundColorIndex: (0, _uint.readByte)()\n  }, {\n    pixelAspectRatio: (0, _uint.readByte)()\n  }]\n}, (0, _.conditional)({\n  gct: (0, _uint.readArray)(3, function (stream, result) {\n    return Math.pow(2, result.lsd.gct.size + 1);\n  })\n}, function (stream, result) {\n  return result.lsd.gct.exists;\n}), // content frames\n{\n  frames: (0, _.loop)([gceSchema, applicationSchema, commentSchema, imageSchema, textSchema], function (stream) {\n    var nextCode = (0, _uint.peekByte)()(stream); // rather than check for a terminator, we should check for the existence\n    // of an ext or image block to avoid infinite loops\n    //var terminator = 0x3B;\n    //return nextCode !== terminator;\n\n    return nextCode === 0x21 || nextCode === 0x2c;\n  })\n}];\nvar _default = schema;\nexports[\"default\"] = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deinterlace = void 0;\n\n/**\r\n * Deinterlace function from https://github.com/shachaf/jsgif\r\n */\nvar deinterlace = function deinterlace(pixels, width) {\n  var newPixels = new Array(pixels.length);\n  var rows = pixels.length / width;\n\n  var cpRow = function cpRow(toRow, fromRow) {\n    var fromPixels = pixels.slice(fromRow * width, (fromRow + 1) * width);\n    newPixels.splice.apply(newPixels, [toRow * width, width].concat(fromPixels));\n  }; // See appendix E.\n\n\n  var offsets = [0, 4, 2, 1];\n  var steps = [8, 8, 4, 2];\n  var fromRow = 0;\n\n  for (var pass = 0; pass < 4; pass++) {\n    for (var toRow = offsets[pass]; toRow < rows; toRow += steps[pass]) {\n      cpRow(toRow, fromRow);\n      fromRow++;\n    }\n  }\n\n  return newPixels;\n};\n\nexports.deinterlace = deinterlace;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.lzw = void 0;\n\n/**\r\n * javascript port of java LZW decompression\r\n * Original java author url: https://gist.github.com/devunwired/4479231\r\n */\nvar lzw = function lzw(minCodeSize, data, pixelCount) {\n  var MAX_STACK_SIZE = 4096;\n  var nullCode = -1;\n  var npix = pixelCount;\n  var available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, i, datum, data_size, first, top, bi, pi;\n  var dstPixels = new Array(pixelCount);\n  var prefix = new Array(MAX_STACK_SIZE);\n  var suffix = new Array(MAX_STACK_SIZE);\n  var pixelStack = new Array(MAX_STACK_SIZE + 1); // Initialize GIF data stream decoder.\n\n  data_size = minCodeSize;\n  clear = 1 << data_size;\n  end_of_information = clear + 1;\n  available = clear + 2;\n  old_code = nullCode;\n  code_size = data_size + 1;\n  code_mask = (1 << code_size) - 1;\n\n  for (code = 0; code < clear; code++) {\n    prefix[code] = 0;\n    suffix[code] = code;\n  } // Decode GIF pixel stream.\n\n\n  var datum, bits, count, first, top, pi, bi;\n  datum = bits = count = first = top = pi = bi = 0;\n\n  for (i = 0; i < npix;) {\n    if (top === 0) {\n      if (bits < code_size) {\n        // get the next byte\n        datum += data[bi] << bits;\n        bits += 8;\n        bi++;\n        continue;\n      } // Get the next code.\n\n\n      code = datum & code_mask;\n      datum >>= code_size;\n      bits -= code_size; // Interpret the code\n\n      if (code > available || code == end_of_information) {\n        break;\n      }\n\n      if (code == clear) {\n        // Reset decoder.\n        code_size = data_size + 1;\n        code_mask = (1 << code_size) - 1;\n        available = clear + 2;\n        old_code = nullCode;\n        continue;\n      }\n\n      if (old_code == nullCode) {\n        pixelStack[top++] = suffix[code];\n        old_code = code;\n        first = code;\n        continue;\n      }\n\n      in_code = code;\n\n      if (code == available) {\n        pixelStack[top++] = first;\n        code = old_code;\n      }\n\n      while (code > clear) {\n        pixelStack[top++] = suffix[code];\n        code = prefix[code];\n      }\n\n      first = suffix[code] & 0xff;\n      pixelStack[top++] = first; // add a new string to the table, but only if space is available\n      // if not, just continue with current table until a clear code is found\n      // (deferred clear code implementation as per GIF spec)\n\n      if (available < MAX_STACK_SIZE) {\n        prefix[available] = old_code;\n        suffix[available] = first;\n        available++;\n\n        if ((available & code_mask) === 0 && available < MAX_STACK_SIZE) {\n          code_size++;\n          code_mask += available;\n        }\n      }\n\n      old_code = in_code;\n    } // Pop a pixel off the pixel stack.\n\n\n    top--;\n    dstPixels[pi++] = pixelStack[top];\n    i++;\n  }\n\n  for (i = pi; i < npix; i++) {\n    dstPixels[i] = 0; // clear missing pixels\n  }\n\n  return dstPixels;\n};\n\nexports.lzw = lzw;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decompressFrames = exports.decompressFrame = exports.parseGIF = void 0;\n\nvar _gif = _interopRequireDefault(require(\"js-binary-schema-parser/lib/schemas/gif\"));\n\nvar _jsBinarySchemaParser = require(\"js-binary-schema-parser\");\n\nvar _uint = require(\"js-binary-schema-parser/lib/parsers/uint8\");\n\nvar _deinterlace = require(\"./deinterlace\");\n\nvar _lzw = require(\"./lzw\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar parseGIF = function parseGIF(arrayBuffer) {\n  var byteData = new Uint8Array(arrayBuffer);\n  return (0, _jsBinarySchemaParser.parse)((0, _uint.buildStream)(byteData), _gif[\"default\"]);\n};\n\nexports.parseGIF = parseGIF;\n\nvar generatePatch = function generatePatch(image) {\n  var totalPixels = image.pixels.length;\n  var patchData = new Uint8ClampedArray(totalPixels * 4);\n\n  for (var i = 0; i < totalPixels; i++) {\n    var pos = i * 4;\n    var colorIndex = image.pixels[i];\n    var color = image.colorTable[colorIndex] || [0, 0, 0];\n    patchData[pos] = color[0];\n    patchData[pos + 1] = color[1];\n    patchData[pos + 2] = color[2];\n    patchData[pos + 3] = colorIndex !== image.transparentIndex ? 255 : 0;\n  }\n\n  return patchData;\n};\n\nvar decompressFrame = function decompressFrame(frame, gct, buildImagePatch) {\n  if (!frame.image) {\n    console.warn('gif frame does not have associated image.');\n    return;\n  }\n\n  var image = frame.image; // get the number of pixels\n\n  var totalPixels = image.descriptor.width * image.descriptor.height; // do lzw decompression\n\n  var pixels = (0, _lzw.lzw)(image.data.minCodeSize, image.data.blocks, totalPixels); // deal with interlacing if necessary\n\n  if (image.descriptor.lct.interlaced) {\n    pixels = (0, _deinterlace.deinterlace)(pixels, image.descriptor.width);\n  }\n\n  var resultImage = {\n    pixels: pixels,\n    dims: {\n      top: frame.image.descriptor.top,\n      left: frame.image.descriptor.left,\n      width: frame.image.descriptor.width,\n      height: frame.image.descriptor.height\n    }\n  }; // color table\n\n  if (image.descriptor.lct && image.descriptor.lct.exists) {\n    resultImage.colorTable = image.lct;\n  } else {\n    resultImage.colorTable = gct;\n  } // add per frame relevant gce information\n\n\n  if (frame.gce) {\n    resultImage.delay = (frame.gce.delay || 10) * 10; // convert to ms\n\n    resultImage.disposalType = frame.gce.extras.disposal; // transparency\n\n    if (frame.gce.extras.transparentColorGiven) {\n      resultImage.transparentIndex = frame.gce.transparentColorIndex;\n    }\n  } // create canvas usable imagedata if desired\n\n\n  if (buildImagePatch) {\n    resultImage.patch = generatePatch(resultImage);\n  }\n\n  return resultImage;\n};\n\nexports.decompressFrame = decompressFrame;\n\nvar decompressFrames = function decompressFrames(parsedGif, buildImagePatches) {\n  return parsedGif.frames.filter(function (f) {\n    return f.image;\n  }).map(function (f) {\n    return decompressFrame(f, parsedGif.gct, buildImagePatches);\n  });\n};\n\nexports.decompressFrames = decompressFrames;","import { parseGIF, decompressFrames } from 'gifuct-js';\r\n\r\nwindow.parseGIF = parseGIF;\r\nwindow.decompressFrames = decompressFrames;\r\nwindow.fetchGif = ( url ) => {\r\n\treturn fetch( url )\r\n\t.then( resp => resp.arrayBuffer() )\r\n\t.then( buff => parseGIF( buff ) )\r\n\t.then( gif => decompressFrames( gif, true ) );\r\n}\r\n"]}